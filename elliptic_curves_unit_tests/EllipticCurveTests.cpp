#include "stdafx.h"
#include "CppUnitTest.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace elliptic_curve_tests
{
	const char p[] = "70575327144056449949103569539334868278798685205073913289930829124069080150173";
	typedef PrimeField<p, 255> Fp;
	const StaticInvoker<Fp> Fp_initializer;
	const Fp::Elem a("0");
	const Fp::Elem b("2");
	const Fp::Elem x0("3025230128046429212210119458031457947102380841549574425909119270426732993372");
	const Fp::Elem y0("44196184262215509780654611155011272810317879119541341257903542732830785012091");
	typedef EllipticCurve<Fp, a, b, x0, y0> EC;
	const StaticInvoker<EC> EC_initializer;

	const char q[] = "70575327144056449949103569539334868278533025032778447724525719518147622219881";
	typedef PrimeField<q, 255> Fq;
	const StaticInvoker<Fq> Fq_initializer;


	TEST_CLASS(FiniteFieldCubicExtensionTests)
	{
		TEST_METHOD(ToString)
		{
			EC::Elem P(Fp::Elem("928045450925056690430106648203092212850404284796308373324055230491063657247"),
					   Fp::Elem("55773349669512020003444630497933764153359558877227353007645827999317683818774"));
			Assert::AreEqual(EC::ToString(P).c_str(), "[928045450925056690430106648203092212850404284796308373324055230491063657247, "
													   "55773349669512020003444630497933764153359558877227353007645827999317683818774]");
		}

		TEST_METHOD(Copy)
		{
			EC::Elem P(Fp::Elem("928045450925056690430106648203092212850404284796308373324055230491063657247"),
					   Fp::Elem("55773349669512020003444630497933764153359558877227353007645827999317683818774"));
			EC::Elem R;
			EC::Copy(R, P);
			Assert::AreEqual(EC::ToString(R).c_str(), "[928045450925056690430106648203092212850404284796308373324055230491063657247, "
													   "55773349669512020003444630497933764153359558877227353007645827999317683818774]");
		}

		TEST_METHOD(Add)
		{
			EC::Elem P(Fp::Elem("928045450925056690430106648203092212850404284796308373324055230491063657247"),
					   Fp::Elem("55773349669512020003444630497933764153359558877227353007645827999317683818774"));
			EC::Elem Q(Fp::Elem("9481227337172811352399234035858992223953632453971415877849693794075415824445"),
					   Fp::Elem("46675444635506703360617001072320089934277380833922188634407229131467589404274"));
			EC::Elem R;
			EC::Add(R, P, Q);
			Assert::AreEqual(EC::ToString(R).c_str(), "[54282226691047151780809076259815583652761919240223155592784112755800992139297, "
													   "22609320196583497480730211411960982439427123389465449489839778368989043050791]");
		}

		TEST_METHOD(Neg)
		{
			EC::Elem P(Fp::Elem("928045450925056690430106648203092212850404284796308373324055230491063657247"),
					   Fp::Elem("55773349669512020003444630497933764153359558877227353007645827999317683818774"));
			EC::Elem R;
			EC::Neg(R, P);
			Assert::AreEqual(EC::ToString(R).c_str(), "[928045450925056690430106648203092212850404284796308373324055230491063657247, "
													   "14801977474544429945658939041401104125439126327846560282285001124751396331399]");
		}

		TEST_METHOD(Sub)
		{
			EC::Elem P(Fp::Elem("928045450925056690430106648203092212850404284796308373324055230491063657247"),
					   Fp::Elem("55773349669512020003444630497933764153359558877227353007645827999317683818774"));
			EC::Elem Q(Fp::Elem("9481227337172811352399234035858992223953632453971415877849693794075415824445"),
					   Fp::Elem("46675444635506703360617001072320089934277380833922188634407229131467589404274"));
			EC::Elem R;
			EC::Sub(R, P, Q);
			Assert::AreEqual(EC::ToString(R).c_str(), "[51540834803633814068944536183248725689597034077095854897228946077340431571861, "
													   "47997690298853313613062081806097148720929561890987110013224157770486892829086]");
		}

		TEST_METHOD(Dbl)
		{
			EC::Elem P(Fp::Elem("928045450925056690430106648203092212850404284796308373324055230491063657247"),
					   Fp::Elem("55773349669512020003444630497933764153359558877227353007645827999317683818774"));
			EC::Elem R;
			EC::Dbl(R, P);
			Assert::AreEqual(EC::ToString(R).c_str(), "[58582050172928121189777632713285693898741533965453795145124512414348338768921, "
													   "17096885516963840321925097165162595838529161467911947448014651411518862717221]");
		}

		TEST_METHOD(Mul)
		{
			EC::Elem P(Fp::Elem("928045450925056690430106648203092212850404284796308373324055230491063657247"),
					   Fp::Elem("55773349669512020003444630497933764153359558877227353007645827999317683818774"));
			Power power("22545441574593253142893746876045733168927486548521632348392490069946454440209");
			EC::Elem R;
			EC::Mul(R, P, power);
			Assert::AreEqual(EC::ToString(R).c_str(), "[39927376972204046756687783810026776777329266111568872866631171432668145147239, "
													   "29980767750696106899950943823349808286935552992097327443034757538043053545846]");
		}

		TEST_METHOD(MultiMul)
		{
			const int elem_number = 100;

			EC::Elem* elems = new EC::Elem[elem_number];
			Power* powers = new Power[elem_number];
			EC::Elem sum;
			EC::Elem tmp_pt;
			EC::SetZero(sum);
			Fq::Elem tmp;
			for (int i = 0; i < elem_number; i++)
			{
				Fq::GetRandomElement(tmp);
				EC::Mul(elems[i], EC::one, tmp);
				Fq::GetRandomElement(tmp);
				powers[i] = tmp;
				EC::Mul(tmp_pt, elems[i], tmp);
				EC::Add(sum, sum, tmp_pt);
			}

			EC::Elem res;
			EC::MultiMul(res, elems, powers, elem_number);

			Assert::AreEqual(EC::ToString(sum).c_str(), EC::ToString(res).c_str());
		}

		TEST_METHOD(Export_Import)
		{
			vector<EC::Elem> test(1000), read;
			Fq::Elem tmp;
			for (int i = 0; i < 1000; i++)
			{
				Fq::GetRandomElement(tmp);
				EC::Mul(test[i], EC::one, tmp);
			}
			ofstream fout("test.bin", ios::binary);
			fout << test;
			fout.close();

			ifstream fin("test.bin", ios::binary);
			fin >> read;
			fin.close();

			for (int i = 0; i < 1000; i++)
			{
				Assert::AreEqual(to_string(i) + ": " + EC::ToString(test[i]).c_str(), (to_string(i) + ": " + EC::ToString(read[i]).c_str()));
			}
		}
	};
}
