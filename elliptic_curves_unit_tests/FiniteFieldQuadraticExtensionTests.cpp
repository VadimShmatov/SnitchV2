#include "stdafx.h"
#include "CppUnitTest.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace quadratic_extension_tests
{
	const char p[] = "42912341410520862597936833150988802181525442218302964959370561090820302032381";
	typedef PrimeField<p, 255> Fp;
	const StaticInvoker<Fp> Fp_initializer;
	const Fp::Elem base1("2");
	typedef QuadraticExtensionField<Fp, base1> Fp2;
	const StaticInvoker<Fp2> Fp2_initializer;
	const Fp2::Elem base2(Fp::Elem("1"), Fp::Elem("0"));
	typedef QuadraticExtensionField<Fp2, base2> Fp22;
	const StaticInvoker<Fp22> Fp22_initializer;

	TEST_CLASS(FiniteFieldQuadraticExtensionTests)
	{
		TEST_METHOD(ToString)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Assert::AreEqual(Fp22::ToString(e1).c_str(), "[[19864070906095474072606429162197774663983491242573858379231099828755117238954, "
														   "19700324107476335108164183297761694797160439133351642232373740221409719183898], ["
														   "1031669109951908507169249445474440723666232422091766649481169153726624273972, "
														   "10333785137698598008022712966446903648158182550139936985835341879462596643522]]");
		}

		TEST_METHOD(Copy)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			Fp22::Copy(e3, e1);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[19864070906095474072606429162197774663983491242573858379231099828755117238954, "
														   "19700324107476335108164183297761694797160439133351642232373740221409719183898], ["
														   "1031669109951908507169249445474440723666232422091766649481169153726624273972, "
														   "10333785137698598008022712966446903648158182550139936985835341879462596643522]]");
		}

		TEST_METHOD(Add)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			Fp22::Elem e3;
			Fp22::Add(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[13136607320082726512854041756611778497160357960489000229864502113099543689399, "
														   "3813678634104377454730782097469772203535736199976377515321628017777900037760], ["
														   "13786116933553874487972074687580112969071175397813873083244260471491276158007, "
														   "15926188590474562151902009324390873728707555315528972088202274829517868452793]]");
		}

		TEST_METHOD(Add_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Add(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[13136607320082726512854041756611778497160357960489000229864502113099543689399, "
														   "3813678634104377454730782097469772203535736199976377515321628017777900037760], ["
														   "13786116933553874487972074687580112969071175397813873083244260471491276158007, "
														   "15926188590474562151902009324390873728707555315528972088202274829517868452793]]");
		}

		TEST_METHOD(Neg)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			Fp22::Neg(e3, e1);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[23048270504425388525330403988791027517541950975729106580139461262065184793427, "
														   "23212017303044527489772649853227107384365003084951322726996820869410582848483], ["
														   "41880672300568954090767583705514361457859209796211198309889391937093677758409, "
														   "32578556272822264589914120184541898533367259668163027973535219211357705388859]]");
		}

		TEST_METHOD(Neg_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Neg(e3, e1);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[23048270504425388525330403988791027517541950975729106580139461262065184793427, "
														   "23212017303044527489772649853227107384365003084951322726996820869410582848483], ["
														   "41880672300568954090767583705514361457859209796211198309889391937093677758409, "
														   "32578556272822264589914120184541898533367259668163027973535219211357705388859]]");
		}

		TEST_METHOD(Sub)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			Fp22::Elem e3;
			Fp22::Sub(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[26591534492108221632358816567783770830806624524658716528597697544410690788509, "
														   "35586969580848292761597584498053617390785142066726906949425852425041538330036], ["
														   "31189562696870805124303257354357570659786731664672625175088638926782274422318, "
														   "4741381684922633864143416608502933567608809784750901883468408929407324834251]]");
		}

		TEST_METHOD(Sub_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Sub(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[26591534492108221632358816567783770830806624524658716528597697544410690788509, "
														   "35586969580848292761597584498053617390785142066726906949425852425041538330036], ["
														   "31189562696870805124303257354357570659786731664672625175088638926782274422318, "
														   "4741381684922633864143416608502933567608809784750901883468408929407324834251]]");
		}

		TEST_METHOD(Sqr)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			Fp22::Sqr(e3, e1);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[28407146472963297650761225682108917639171593679103881918264858404673234684078, "
														   "36049782705468495898101753132776823707552060863989816049882448649575057894860], ["
														   "7818256530301258519236985769600288957274907636739453216079909336492576975779, "
														   "4154871625998628802442650336650819334573034704501673557744127443574285142364]]");
		}

		TEST_METHOD(Sqr_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Sqr(e3, e1);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[28407146472963297650761225682108917639171593679103881918264858404673234684078, "
														   "36049782705468495898101753132776823707552060863989816049882448649575057894860], ["
														   "7818256530301258519236985769600288957274907636739453216079909336492576975779, "
														   "4154871625998628802442650336650819334573034704501673557744127443574285142364]]");
		}

		TEST_METHOD(Mul)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			Fp22::Elem e3;
			Fp22::Mul(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[14635694070247536918225270096808480968875012246196000103453610405729934735139, "
														   "10450212878959479905100500260149409657382357716267358977678349122053218465739], ["
														   "27324829361233828737690989829439773770514705016408833879785158868559108793854, "
														   "17613690000956236750269990349916611832170002276779721260259844722117024796943]]");
		}

		TEST_METHOD(Mul_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Mul(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[14635694070247536918225270096808480968875012246196000103453610405729934735139, "
														   "10450212878959479905100500260149409657382357716267358977678349122053218465739], ["
														   "27324829361233828737690989829439773770514705016408833879785158868559108793854, "
														   "17613690000956236750269990349916611832170002276779721260259844722117024796943]]");
		}

		TEST_METHOD(Mul_Scalar)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			Fp22::Mul(e3, e1, 12345);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[20836516032418541715303382581512561639822554191139913764541313034716501862096, "
														   "16262333373628567778809344214580308240940050103120933900853331624331707717683], ["
														   "33902104842135192015081791689285287928108354105181659871347119872367260599564, "
														   "35098852821188767972123446048305453019149308681110230887987940047817924042758]]");
		}

		TEST_METHOD(Mul_Scalar_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Mul(e3, e1, 12345);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[20836516032418541715303382581512561639822554191139913764541313034716501862096, "
														   "16262333373628567778809344214580308240940050103120933900853331624331707717683], ["
														   "33902104842135192015081791689285287928108354105181659871347119872367260599564, "
														   "35098852821188767972123446048305453019149308681110230887987940047817924042758]]");
		}

		TEST_METHOD(Mul_Special)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("0"),
									Fp::Elem("0")),
						  Fp2::Elem(Fp::Elem("0"),
									Fp::Elem("12345")));
			Fp22::Elem e3;
			Fp22::Mul(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[20836516032418541715303382581512561639822554191139913764541313034716501862096, "
														   "16262333373628567778809344214580308240940050103120933900853331624331707717683], ["
														   "33902104842135192015081791689285287928108354105181659871347119872367260599564, "
														   "35098852821188767972123446048305453019149308681110230887987940047817924042758]]");
		}

		TEST_METHOD(Mul_Special_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("0"),
									Fp::Elem("0")),
						  Fp2::Elem(Fp::Elem("0"),
									Fp::Elem("12345")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Mul(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[20836516032418541715303382581512561639822554191139913764541313034716501862096, "
														   "16262333373628567778809344214580308240940050103120933900853331624331707717683], ["
														   "33902104842135192015081791689285287928108354105181659871347119872367260599564, "
														   "35098852821188767972123446048305453019149308681110230887987940047817924042758]]");
		}

		TEST_METHOD(Inv)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			Fp22::Inv(e3, e1);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[38714053931080660847992586259538012876513135032259155237481868298348561046121, "
														   "31439721243530450840991145859270131524080997193750693569387851990389428055188], ["
														   "12200888108518101414838937536632425693795381899851155375934209315296433560209, "
														   "12472413147053489318522535188224676897029752257281403556284308451013527958206]]");
		}

		TEST_METHOD(Inv_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Inv(e3, e1);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[38714053931080660847992586259538012876513135032259155237481868298348561046121, "
														   "31439721243530450840991145859270131524080997193750693569387851990389428055188], ["
														   "12200888108518101414838937536632425693795381899851155375934209315296433560209, "
														   "12472413147053489318522535188224676897029752257281403556284308451013527958206]]");
		}

		TEST_METHOD(Div)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			Fp22::Elem e3;
			Fp22::Div(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[13586548025789716193378946076158672225946976548240799481967254143412452054834, "
														   "39937212304930453445072876297453512035570295167631706235279613470474596793587], ["
														   "29782123282041517104812916481761634667510403396324860282521133113107168055059, "
														   "4374322569056689709467484367769687394115165169090134326156418855230352782861]]");
		}

		TEST_METHOD(Div_x1000000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			Fp22::Elem e3;
			for (int i = 0; i < 1000000; i++)
				Fp22::Div(e3, e1, e2);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[13586548025789716193378946076158672225946976548240799481967254143412452054834, "
														   "39937212304930453445072876297453512035570295167631706235279613470474596793587], ["
														   "29782123282041517104812916481761634667510403396324860282521133113107168055059, "
														   "4374322569056689709467484367769687394115165169090134326156418855230352782861]]");
		}

		TEST_METHOD(Exp)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Power power("5727030983365422404648469636657308112770374107258382174706631886831014111794");
			Fp22::Elem e3;
			Fp22::Exp(e3, e1, power);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[26598698159368516466689470017293311469721390863147108935110968421848152053154, "
														   "29610652012271675824401971856578480008590351277029339749532954680703466255018], ["
														   "4258654237367497313656058570639452097218505544526606278927128119424338452063, "
														   "35639715438186168470961598458547936359432364772260824187397244556832377769775]]");
		}

		TEST_METHOD(Exp_x1000)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Power power("5727030983365422404648469636657308112770374107258382174706631886831014111794");
			Fp22::Elem e3;
			for (int i = 0; i < 1000; i++)
				Fp22::Exp(e3, e1, power);
			Assert::AreEqual(Fp22::ToString(e3).c_str(), "[[26598698159368516466689470017293311469721390863147108935110968421848152053154, "
														   "29610652012271675824401971856578480008590351277029339749532954680703466255018], ["
														   "4258654237367497313656058570639452097218505544526606278927128119424338452063, "
														   "35639715438186168470961598458547936359432364772260824187397244556832377769775]]");
		}

		TEST_METHOD(CheckEqual)
		{
			Fp22::Elem e1(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e2(Fp2::Elem(Fp::Elem("19864070906095474072606429162197774663983491242573858379231099828755117238954"),
									Fp::Elem("19700324107476335108164183297761694797160439133351642232373740221409719183898")),
						  Fp2::Elem(Fp::Elem("1031669109951908507169249445474440723666232422091766649481169153726624273972"),
									Fp::Elem("10333785137698598008022712966446903648158182550139936985835341879462596643522")));
			Fp22::Elem e3(Fp2::Elem(Fp::Elem("36184877824508115038184445745402806014702308936218106810003963375164728482826"),
									Fp::Elem("27025695937148904944503431950696879587900739284927700242318448887188482886243")),
						  Fp2::Elem(Fp::Elem("12754447823601965980802825242105672245404942975722106433763091317764651884035"),
									Fp::Elem("5592403452775964143879296357943970080549372765389035102366932950055271809271")));
			bool b1 = Fp22::CheckEqual(e1, e2);
			Assert::AreEqual(b1, true);
			bool b2 = Fp22::CheckEqual(e1, e3);
			Assert::AreEqual(b2, false);
			bool b3 = Fp22::CheckEqual(e2, e3);
			Assert::AreEqual(b3, false);
		}
	};
}