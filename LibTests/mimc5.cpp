#include "mimc5.h"

shared_ptr<MiMC5> MiMC5::m_pInstance = nullptr;
const size_t MiMC5::m_uiNumberOfRounds = 161;
Fr::Elem MiMC5::m_initialValue;

// TODO! Add semaphore for thread safety
shared_ptr<MiMC5> MiMC5::GetInstance()
{
    if (m_pInstance == nullptr)
        m_pInstance = shared_ptr<MiMC5>(new MiMC5());
    return m_pInstance;
}

Fr::Elem MiMC5::HashStep(Fr::Elem v1, Fr::Elem v2)
{
	Fr::Elem pow2_i_j, pow3_i_j;
    //Fr::Elem y1 = v1 + Fr::Elem(2) * v2;
	Fr::Elem y1;
	Fr::Dbl(y1, v2);
	Fr::Add(y1, y1, v1);
    for (size_t j = 0; j < 161; j++)
    {
        //y1 += m_pRoundConstants[j];
		Fr::Add(y1, y1, m_pRoundConstants[j]);
        //Fr::Elem pow2_i_j = y1 * y1;
		Fr::Sqr(pow2_i_j, y1);
        //Fr::Elem pow3_i_j = pow2_i_j * y1;
		Fr::Mul(pow3_i_j, pow2_i_j, y1);
        //y1 = pow2_i_j * pow3_i_j;
		Fr::Mul(y1, pow2_i_j, pow3_i_j);
    }

    //Fr::Elem y2 = Fr::Elem(2) * v1 + Fr::Elem(2) * v2 + y1;
	Fr::Elem y2, tmp;
	Fr::Dbl(y2, v1);
	Fr::Dbl(tmp, v2);
	Fr::Add(y2, y2, tmp);
	Fr::Add(y2, y2, y1);
    for (size_t j = 0; j < 161; j++)
    {
        //y2 += m_pRoundConstants[j];
		Fr::Add(y2, y2, m_pRoundConstants[j]);
        //Fr::Elem pow2_i_j = y2 * y2;
		Fr::Sqr(pow2_i_j, y2);
        //Fr::Elem pow3_i_j = pow2_i_j * y2;
		Fr::Mul(pow3_i_j, pow2_i_j, y2);
        //y2 = pow2_i_j * pow3_i_j;
		Fr::Mul(y2, pow2_i_j, pow3_i_j);

    }

    //Fr::Elem y3 = Fr::Elem(2) * v1 + v2 + y2;
	Fr::Elem y3;
	Fr::Dbl(y3, v1);
	Fr::Add(y3, y3, v2);
	Fr::Add(y3, y3, y2);
    for (size_t j = 0; j < 161; j++)
    {
        //y3 += m_pRoundConstants[j];
		Fr::Add(y3, y3, m_pRoundConstants[j]);
        //Fr::Elem pow2_i_j = y3 * y3;
		Fr::Sqr(pow2_i_j, y3);
        //Fr::Elem pow3_i_j = pow2_i_j * y3;
		Fr::Mul(pow3_i_j, pow2_i_j, y3);
        //y3 = pow2_i_j * pow3_i_j;
		Fr::Mul(y3, pow2_i_j, pow3_i_j);
    }

    //Fr::Elem w1 = v1 + y1 + y2 + Fr::Elem(2) * y3;
	Fr::Elem w1;
	Fr::Dbl(w1, y3);
	Fr::Add(w1, w1, y2);
	Fr::Add(w1, w1, y1);
	Fr::Add(w1, w1, v1);

    return w1;
}

Fr::Elem MiMC5::Hash(vector<Fr::Elem> vBlocks)
{
    Fr::Elem result("0");
    for (auto it = vBlocks.begin(); it != vBlocks.end(); it++)
        result = HashStep(result, *it);
    return result;
}

Fr::Elem MiMC5::HashStep_witness(Fr::Elem v1, Fr::Elem v2, map<string, Fr::Elem>& wit_map, size_t& step)
{
    /*map<string, Fr::Elem> wit_map = {
        { "~one", 1 },
        { "~v1", v1 },
        { "~v2", v2 }
    };*/

    /*Fr::Elem y1 = v1 + Fr::Elem(2) * v2;
    for (size_t j = 0; j < m_uiNumberOfRounds; j++)
    {
        y1 += m_pRoundConstants[j];
        Fr::Elem pow2_i_j = y1 * y1;
        wit_map["pow2_" + to_string(step) + "_" + to_string(j)] = pow2_i_j;
        Fr::Elem pow3_i_j = pow2_i_j * y1;
        wit_map["pow3_" + to_string(step) + "_" + to_string(j)] = pow3_i_j;
        y1 = pow2_i_j * pow3_i_j;
        wit_map["mimc_" + to_string(step) + "_" + to_string(j)] = y1;
    }
    step++;

    Fr::Elem y2 = Fr::Elem(2) * v1 + Fr::Elem(2) * v2 + y1;
    for (size_t j = 0; j < m_uiNumberOfRounds; j++)
    {
        y2 += m_pRoundConstants[j];
        Fr::Elem pow2_i_j = y2 * y2;
        wit_map["pow2_" + to_string(step) + "_" + to_string(j)] = pow2_i_j;
        Fr::Elem pow3_i_j = pow2_i_j * y2;
        wit_map["pow3_" + to_string(step) + "_" + to_string(j)] = pow3_i_j;
        y2 = pow2_i_j * pow3_i_j;
        wit_map["mimc_" + to_string(step) + "_" + to_string(j)] = y2;
    }
    step++;

    Fr::Elem y3 = Fr::Elem(2) * v1 + v2 + y2;
    for (size_t j = 0; j < m_uiNumberOfRounds; j++)
    {
        y3 += m_pRoundConstants[j];
        Fr::Elem pow2_i_j = y3 * y3;
        wit_map["pow2_" + to_string(step) + "_" + to_string(j)] = pow2_i_j;
        Fr::Elem pow3_i_j = pow2_i_j * y3;
        wit_map["pow3_" + to_string(step) + "_" + to_string(j)] = pow3_i_j;
        y3 = pow2_i_j * pow3_i_j;
        wit_map["mimc_" + to_string(step) + "_" + to_string(j)] = y3;
    }

    Fr::Elem w1 = v1 + y1 + y2 + Fr::Elem(2) * y3;
    wit_map["mimc_" + to_string(step)] = w1;
    step++;
    return w1;*/

	Fr::Elem pow2_i_j, pow3_i_j;
	Fr::Elem y1;
	Fr::Dbl(y1, v2);
	Fr::Add(y1, y1, v1);
	for (size_t j = 0; j < 161; j++)
	{
		Fr::Add(y1, y1, m_pRoundConstants[j]);
		Fr::Sqr(pow2_i_j, y1);
		wit_map["pow2_" + to_string(step) + "_" + to_string(j)] = pow2_i_j;
		Fr::Mul(pow3_i_j, pow2_i_j, y1);
		wit_map["pow3_" + to_string(step) + "_" + to_string(j)] = pow3_i_j;
		Fr::Mul(y1, pow2_i_j, pow3_i_j);
		wit_map["mimc_" + to_string(step) + "_" + to_string(j)] = y1;
	}
	step++;

	Fr::Elem y2, tmp;
	Fr::Dbl(y2, v1);
	Fr::Dbl(tmp, v2);
	Fr::Add(y2, y2, tmp);
	Fr::Add(y2, y2, y1);
	for (size_t j = 0; j < 161; j++)
	{
		Fr::Add(y2, y2, m_pRoundConstants[j]);
		Fr::Sqr(pow2_i_j, y2);
		wit_map["pow2_" + to_string(step) + "_" + to_string(j)] = pow2_i_j;
		Fr::Mul(pow3_i_j, pow2_i_j, y2);
		wit_map["pow3_" + to_string(step) + "_" + to_string(j)] = pow3_i_j;
		Fr::Mul(y2, pow2_i_j, pow3_i_j);
		wit_map["mimc_" + to_string(step) + "_" + to_string(j)] = y2;

	}
	step++;

	Fr::Elem y3;
	Fr::Dbl(y3, v1);
	Fr::Add(y3, y3, v2);
	Fr::Add(y3, y3, y2);
	for (size_t j = 0; j < 161; j++)
	{
		Fr::Add(y3, y3, m_pRoundConstants[j]);
		Fr::Sqr(pow2_i_j, y3);
		wit_map["pow2_" + to_string(step) + "_" + to_string(j)] = pow2_i_j;
		Fr::Mul(pow3_i_j, pow2_i_j, y3);
		wit_map["pow3_" + to_string(step) + "_" + to_string(j)] = pow3_i_j;
		Fr::Mul(y3, pow2_i_j, pow3_i_j);
		wit_map["mimc_" + to_string(step) + "_" + to_string(j)] = y3;
	}

	Fr::Elem w1;
	Fr::Dbl(w1, y3);
	Fr::Add(w1, w1, y2);
	Fr::Add(w1, w1, y1);
	Fr::Add(w1, w1, v1);
	wit_map["mimc_" + to_string(step)] = w1;
	step++;
	return w1;

    /*vector<Fr::Elem> wit;
    for (auto it = V.begin(); it != V.end(); it++)
        wit.push_back(wit_map[*it]);
    return wit;*/
}

Fr::Elem MiMC5::Hash_witness(vector<Fr::Elem> vBlocks, map<string, Fr::Elem>& wit_map, size_t& step)
{
    Fr::Elem result = "0";
    for (auto it = vBlocks.begin(); it != vBlocks.end(); it++)
        result = HashStep_witness(result, *it, wit_map, step);
    return result;
}

MiMC5::MiMC5()
{
    //libff::alt_bn128_pp::init_public_params();
	Fr::SetZero(m_initialValue);
    m_pRoundConstants = new Fr::Elem[m_uiNumberOfRounds] {
        "31415926535897932384626433832795028841971693993751058209749445923078164062862",
        "08998628034825342117067982148086513282306647093844609550582231725359408128481",
        "11745028410270193852110555964462294895493038196442881097566593344612847564823",
        "37867831652712019091456485669234603486104543266482133936072602491412737245870",
        "06606315588174881520920962829254091715364367892590360011330530548820466521384",
        "14695194151160943305727036575959195309218611738193261179310511854807446237996",
        "27495673518857527248912279381830119491298336733624406566430860213949463952247",
        "37190702179860943702770539217176293176752384674818467669405132000568127145263",
        "56082778577134275778960917363717872146844090122495343014654958537105079227968",
        "92589235420199561121290219608640344181598136297747713099605187072113499999983",
        "72978049951059731732816096318595024459455346908302642522308253344685035261931",
        "18817101000313783875288658753320838142061717766914730359825349042875546873115",
        "95628638823537875937519577818577805321712268066130019278766111959092164201989",
        "38095257201065485863278865936153381827968230301952035301852968995773622599413",
        "89124972177528347913151557485724245415069595082953311686172785588907509838175",
        "46374649393192550604009277016711390098488240128583616035637076601047101819429",
        "55596198946767837449448255379774726847104047534646208046684259069491293313677",
        "02898915210475216205696602405803815019351125338243003558764024749647326391419",
        "92726042699227967823547816360093417216412199245863150302861829745557067498385",
        "05494588586926995690927210797509302955321165344987202755960236480665499119881",
        "83479775356636980742654252786255181841757467289097777279380008164706001614524",
        "91921732172147723501414419735685481613611573525521334757418494684385233239073",
        "94143334547762416862518983569485562099219222184272550254256887671790494601653",
        "46680498862723279178608578438382796797668145410095388378636095068006422512520",
        "51173929848960841284886269456042419652850222106611863067442786220391949450471",
        "23713786960956364371917287467764657573962413890865832645995813390478027590099",
        "46576407895126946839835259570982582262052248940772671947826848260147699090264",
        "01363944374553050682034962524517493996514314298091906592509372216964615157098",
        "58387410597885959772975498930161753928468138268683868942774155991855925245953",
        "95943104997252468084598727364469584865383673622262609912460805124388439045124",
        "41365497627807977156914359977001296160894416948685558484063534220722258284886",
        "48158456028506016842739452267467678895252138522549954666727823986456596116354",
        "88623057745649803559363456817432411251507606947945109659609402522887971089314",
        "56691368672287489405601015033086179286809208747609178249385890097149096759852",
        "61365549781893129784821682998948722658804857564014270477555132379641451523746",
        "23436454285844479526586782105114135473573952311342716610213596953623144295248",
        "49371871101457654035902799344037420073105785390621983874478084784896833214457",
        "13868751943506430218453191048481005370614680674919278191197939952061419663428",
        "75444064374512371819217999839101591956181467514269123974894090718649423196156",
        "79452080951465502252316038819301420937621378559566389377870830390697920773467",
        "22182562599661501421503068038447734549202605414665925201497442850732518666002",
        "13243408819071048633173464965145390579626856100550810665879699816357473638405",
        "25714591028970641401109712062804390397595156771577004203378699360072305587631",
        "76359421873125147120532928191826186125867321579198414848829164470609575270695",
        "72209175671167229109816909152801735067127485832228718352093539657251210835791",
        "51369882091444210067510334671103141267111369908658516398315019701651511685171",
        "43765761835155650884909989859982387345528331635507647918535893226185489632132",
        "93308985706420467525907091548141654985946163718027098199430992448895757128289",
        "05923233260972997120844335732654893823911932597463667305836041428138830320382",
        "49037589852437441702913276561809377344403070746921120191302033038019762110110",
        "04492932151608424448596376698389522868478312355265821314495768572624334418930",
        "39686426243410773226978028073189154411010446823252716201052652272111660396665",
        "57309254711055785376346682065310989652691862056476931257058635662018558100729",
        "36065987648611791045334885034611365768675324944166803962657978771855608455296",
        "54126654085306143444318586769751456614068007002378776591344017127494704205622",
        "30538994561314071127000407854733269939081454664645880797270826683063432858785",
        "69830523580893306575740679545716377525420211495576158140025012622859413021647",
        "15509792592309907965473761255176567513575178296664547791745011299614890304639",
        "94713296210734043751895735961458901938971311179042978285647503203198691514028",
        "70808599048010941214722131794764777262241425485454033215718530614228813758504",
        "30633217518297986622371721591607716692547487389866549494501146540628433663937",
        "90039769265672146385306736096571209180763832716641627488880078692560290228472",
        "10403172118608204190004229661711963779213375751149595015660496318629472654736",
        "42523081770367515906735023507283540567040386743513622224771589150495309844489",
        "33309634087807693259939780541934144737744184263129860809988868741326047215695",
        "16239658645730216315981931951673538129741677294786724229246543668009806769282",
        "38280689964004824354037014163149658979409243237896907069779422362508221688957",
        "38379862300159377647165122893578601588161755782973523344604281512627203734314",
        "65319777741603199066554187639792933441952154134189948544473456738316249934191",
        "31814809277771038638773431772075456545322077709212019051660962804909263601975",
        "98828161332316663652861932668633606273567630354477628035045077723554710585954",
        "87027908143562401451718062464362679456127531813407833033625423278394497538243",
        "72058353114771199260638133467768796959703098339130771098704085913374641442822",
        "77263465947047458784778720192771528073176790770715721344473060570073349243693",
        "11383504931631284042512192565179806941135280131470130478164378851852909285452",
        "01165839341965621349143415956258658655705526904965209858033850722426482939728",
        "58478316305777756068887644624824685792603953527734803048029005876075825104747",
        "09164396136267604492562742042083208566119062545433721315359584506877246029016",
        "18766795240616342522577195429162991930645537799140373404328752628889639958794",
        "75729174642635745525407909145135711136941091193932519107602082520261879853188",
        "77058429725916778131496990090192116971737278476847268608490033770242429165130",
        "05005168323364350389517029893922334517220138128069650117844087451960121228599",
        "37162313017114448464090389064495444006198690754851602632750529834918740786680",
        "88183385102283345085048608250393021332197155184306354550076682829493041377655",
        "27939751754613953984683393638304746119966538581538420568533862186725233402830",
        "87112328278921250771262946322956398989893582116745627010218356462201349671518",
        "81909730381198004973407239610368540664319395097901906996395524530054505806855",
        "01956730229219139339185680344903982059551002263535361920419947455385938102343",
        "95544959778377902374216172711172364343543947822181852862408514006660443325888",
        "56986705431547069657474585503323233421073015459405165537906866273337995851156",
        "25784322988273723198987571415957811196358330059408730681216028764962867446047",
        "74649159950549737425626901049037781986835938146574126804925648798556145372347",
        "86733039046883834363465537949864192705638729317487233208376011230299113679386",
        "27089438799362016295154133714248928307220126901475466847653576164773794675200",
        "49075715552781965362132392640616013635815590742202020318727760527721900556148",
        "42555187925303435139844253223415762336106425063904975008656271095359194658975",
        "14131034822769306247435363256916078154781811528436679570611086153315044521274",
        "73924544945423682886061340841486377670096120715124914043027253860764823634143",
        "34623518975766452164137679690314950191085759844239198629164219399490723623464",
        "68441173940326591840443780513338945257423995082965912285085558215725031071257",
        "01266830240292952522011872676756220415420516184163484756516999811614101002996",
        "07838690929160302884002691041407928862150784245167090870006992821206604183718",
        "06535567252532567532861291042487761825829765157959847035622262934860034158722",
        "98053498965022629174878820273420922224533985626476691490556284250391275771028",
        "40279980663658254889264880254566101729670266407655904290994568150652653053718",
        "29412703369313785178609040708667114965583434347693385781711386455873678123014",
        "58768712660348913909562009939361031029161615288138437909904231747336394804575",
        "93149314052976347574811935670911013775172100803155902485309066920376719220332",
        "29094334676851422144773793937517034436619910403375111735471918550464490263655",
        "12816228824462575916333039107225383742182140883508657391771509682887478265699",
        "59957449066175834413752239709683408005355984917541738188399944697486762655165",
        "82765848358845314277568790029095170283529716344562129640435231176006651012412",
        "00659755851276178583829204197484423608007193045761893234922927965019875187212",
        "72675079812554709589045563579212210333466974992356302549478024901141952123828",
        "15309114079073860251522742995818072471625916685451333123948049470791191532673",
        "43028244186041426363954800044800267049624820179289647669758318327131425170296",
        "92348896276684403232609275249603579964692565049368183609003238092934595889706",
        "95365349406034021665443755890045632882250545255640564482465151875471196218443",
        "96582533754388569094113031509526179378002974120766514793942590298969594699556",
        "57612186561967337862362561252163208628692221032748892186543648022967807057656",
        "15144632046927906821207388377814233562823608963208068222468012248261177185896",
        "38140918390367367222088832151375560037279839400415297002878307667094447456013",
        "45564172543709069793961225714298946715435784687886144458123145935719849225284",
        "71605049221242470141214780573455105008019086996033027634787081081754501193071",
        "41223390866393833952942578690507643100638351983438934159613185434754649556978",
        "10382930971646514384070070736041123735998434522516105070270562352660127648483",
        "08407611830130527932054274628654036036745328651057065874882256981579367897669",
        "74220575059683440869735020141020672358502007245225632651341055924019027421624",
        "84391403599895353945909440704691209140938700126456001623742880210927645793106",
        "57922955249887275846101264836999892256959688159205600101655256375678566722796",
        "61988578279484885583439751874454551296563443480396642055798293680435220277098",
        "42942325330225763418070394769941597915945300697521482933665556615678736400536",
        "66564165473217043903521329543529169414599041608753201868379370234888689479151",
        "07163785290234529244077365949563051007421087142613497459561513849871375704710",
        "17879573104229690666702144986374645952808243694457897723300487647652413390759",
        "20434019634039114732023380715095222010682563427471646024335440051521266932493",
        "41967397704159568375355516673027390074972973635496453328886984406119649616277",
        "34495182736955882207573551766515898551909866653935494810688732068599075407923",
        "42402300925900701731960362254756478940647548346647760411463233905651343306844",
        "95397907090302346046147096169688688501408347040546074295869913829668246818571",
        "03188790652870366508324319744047718556789348230894310682870272280973624809399",
        "62706074726455399253994428081137369433887294063079261595995462624629707062594",
        "84556903471197299640908941805953439325123623550813494900436427852713831591256",
        "89892951964272875739469142725343669415323610045373048819855170659412173524625",
        "89548730167600298865925786628561249665523533829428785425340483083307016537228",
        "56355915253478445981831341129001999205981352205117336585640782648494276441137",
        "63938669248031183644536985891754426473998822846218449008777697763127957226726",
        "55562596282542765318300134070922334365779160128093179401718598599933849235495",
        "64005709955856113498025249906698423301735035804408116855265311709957089942732",
        "87092584878944364600504108922669178352587078595129834417295351953788553457374",
        "26085902908176515578039059464087350612322611200937310804854852635722825768203",
        "41605048466277504500312620080079980492548534694146977516493270950493463938243",
        "22271885159740547021482897111777923761225788734771881968254629812686858170507",
        "40272550263329044976277894423621674119186269439650671515779586756482399391760",
        "42601763387045499017614364120469218237076488783419689686118155815873606293860",
        "38101712158552726683008238340465647588040513808016336388742163714064354955618",
        "68964112282140753302655100424104896783528588290243670904887118190909494533144",
        "21828766181031007354770549815968077200947469613436092861484941785017180779306",
        "81085469000944589952794243981392135055864221964834915126390128038320010977386",
        "80662877923971801461343244572640097374257007359210031541508936793008169980536",
        "52027600727749674584002836240534603726341655425902760183484030681138185510597"
    };
}

MiMC5::~MiMC5()
{
    delete[] m_pRoundConstants;
}